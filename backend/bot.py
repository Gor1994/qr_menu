import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,WebAppInfo, InputMediaPhoto, InputMediaVideo, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from pymongo import MongoClient
from urllib.parse import quote, unquote
import traceback
import aiohttp
from telegram import InputFile
from io import BytesIO
from bson import ObjectId

MONGO_URI = 'mongodb+srv://karapetyangor94:oKfGj2pbXhruOJ0F@cluster1.ullp5.mongodb.net/nts-company?retryWrites=true&w=majority'
client = MongoClient(MONGO_URI)
db = client['nts-company']
gallery=db["bot_content"]
# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)



main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üõç –ö–£–ü–ò–¢–¨")],
        [KeyboardButton("üìÇ –ö–ê–¢–ê–õ–û–ì"), KeyboardButton("üñº –ì–ê–õ–ï–†–ï–Ø")],
        [KeyboardButton("‚ÑπÔ∏è –û –ö–û–ú–ü–ê–ù–ò–ò"), KeyboardButton("‚≠ê –û–¢–ó–´–í–´")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

gallery_main_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì¶ –í–∏–¥–µ–æ-—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏", callback_data="gallery_unpack")],
    [InlineKeyboardButton("üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã", callback_data="gallery_reviews")],
    [InlineKeyboardButton("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="gallery_photos")]
])

def parse_callback_data(data):
    parts = data.split("_", 2)
    return parts[0], parts[1], parts[2] if len(parts) == 3 else None
    # returns (type, brand_or_branch, model_or_brand)

def normalize(s):
    return s.strip().lower().replace(" ", "").replace("-", "").replace("_", "")

# def get_buy_button(brand):
#     is_iphone = normalize(brand) == "apple"
#     target = "iphone" if is_iphone else "android"
#     return InlineKeyboardMarkup([
#         [InlineKeyboardButton("üõç –ö–£–ü–ò–¢–¨", web_app=WebAppInfo(url=f"https://nts-online.ru?scroll={target}"))]
#     ])

def get_buy_button(brand, back_callback_data="gallery_back"):
    is_iphone = normalize(brand) == "apple"
    target = "iphone" if is_iphone else "android"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõç –ö–£–ü–ò–¢–¨", web_app=WebAppInfo(url=f"https://nts-online.ru?scroll={target}"))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
    ])

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    logger.info(f"üß© Raw callback data: {data}")

    if data == "find_dream":
        await send_gallery_main_menu(query.message.chat.id, context.bot)
    elif data == "gallery_back":
        try:
            await query.message.delete()  # delete the last message
        except Exception as e:
            logger.warning(f"Failed to delete message: {e}")

        # Then send the original brand/model selection menu again
        await send_gallery_main_menu(update.effective_chat.id, context.bot)

    elif data in ["gallery_photos", "gallery_reviews", "gallery_unpack"]:
        await delete_previous_message(update, context) 
        label_map = {
            "gallery_photos": ("–§–æ—Ç–æ", "photos"),
            "gallery_reviews": ("–í–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã", "review"),
            "gallery_unpack": ("–í–∏–¥–µ–æ-—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏", "unpacking")
        }
        label, prefix = label_map[data]
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì± –ê–π—Ñ–æ–Ω—ã", callback_data=f"{prefix}_iphones")],
            [InlineKeyboardButton("ü§ñ –ê–Ω–¥—Ä–æ–∏–¥—ã", callback_data=f"{prefix}_android")]
        ])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {label}:", reply_markup=keyboard)
    elif data == "catalog_iphones":
        await query.edit_message_text(
            text="üì± –ü–µ—Ä–µ–π—Ç–∏ –∫ iPhone:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å iPhone –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url="https://nts-online.ru?scroll=iphone"))]
            ])
        )

    elif data == "catalog_androids":
        print(f"herejnsjnsfdn")
        await query.edit_message_text(
            text="ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ Android:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å Android –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url="https://nts-online.ru?scroll=android"))]
            ])
        )
    elif data.endswith("_iphones"):
        print(f"herejnsjnsfdn")
        await delete_previous_message(update, context) 
        content_type = data.split("_")[0]
        
        # get Apple models of that type
        docs = list(gallery.find({"brand": "Apple", "type": content_type}))
        buttons = []

        for doc in docs:
            model = doc.get("model")
            if model:
                buttons.append([
                    InlineKeyboardButton(model, callback_data=f"model_{str(doc['_id'])}")
                ])

        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="gallery_back")])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone ({content_type}):", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.endswith("_android"):
        print(f"herejnsjnsfdn")
        await delete_previous_message(update, context) 
        content_type = data.split("_")[0]
        
        # Distinct Android brands
        brands = gallery.distinct("brand", {"brand": {"$ne": "Apple"}, "type": content_type})
        buttons = []

        for brand in brands:
            buttons.append([
                InlineKeyboardButton(brand, callback_data=f"{content_type}_brand_{quote(brand)}")
            ])

        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="gallery_back")])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ Android ({content_type}):", reply_markup=InlineKeyboardMarkup(buttons))


    elif data.startswith("model_"):
        doc_id = data.replace("model_", "")
        doc = gallery.find_one({"_id": ObjectId(doc_id)})

        if not doc:
            await query.edit_message_text("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        model = doc.get("model", "")
        brand = doc.get("brand", "")
        content_type = doc.get("type", "")

        if "submodels" in doc and doc["submodels"]:
            buttons = [[InlineKeyboardButton(
                sub["name"],
                callback_data=f"v_{str(doc['_id'])}_{i}"
            )] for i, sub in enumerate(doc["submodels"])]
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="gallery_back")])
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ {model}:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        else:
            await query.edit_message_text("‚ö†Ô∏è –£ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –ø–æ–¥–≤–µ—Ä—Å–∏–π.")
            
    elif data.startswith(("photos_brand_", "review_brand_", "unpacking_brand_")):
        print(f"herejnsjnsfdn")
        content_type, _, brand = parse_callback_data(data)
        brand = unquote(brand)
        models = gallery.distinct("model", {"brand": brand, "type": content_type})
        buttons = [[InlineKeyboardButton(model, callback_data=f"{content_type}_{brand}_{quote(model)}")] for model in models]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="gallery_back")])
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å {brand}:", reply_markup=InlineKeyboardMarkup(buttons))

    # ‚úÖ Submodel selected
    elif data.count("_") >= 3:
        print(f"herejnsjnsfdn")
        parts = data.split("_", 3)
        if len(parts) != 4:
            return
        content_type, brand, raw_model, raw_submodel = parts
        model = unquote(raw_model)
        submodel = unquote(raw_submodel)

        logger.info(f"üì¶ Submodel requested: {brand} {model} - {submodel}")
        doc = gallery.find_one({
            "brand": {"$regex": f"^{brand}$", "$options": "i"},
            "model": {"$regex": f"^{model}$", "$options": "i"},
            "type": content_type
        })

        if not doc or "submodels" not in doc:
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        submodel_norm = normalize(submodel)
        match = next((s for s in doc["submodels"] if normalize(s["name"]) == submodel_norm), None)

        if not match or not match.get("files"):
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏.")
            return

        try:
            # Clean up previous gallery messages
            if "last_gallery_message_ids" in context.user_data:
                for msg_id in context.user_data["last_gallery_message_ids"]:
                    try:
                        await context.bot.delete_message(chat_id=query.message.chat.id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"Could not delete message {msg_id}: {e}")
                context.user_data.pop("last_gallery_message_ids", None)

            caption = match.get("caption", "")
            caption_used = False
            last_message_ids = []

            for url in match["files"][:10]:
                is_image = url.lower().endswith((".jpg", ".jpeg", ".png", ".webp"))
                is_video = url.lower().endswith((".mp4", ".mov", ".mkv"))

                if is_image:
                    msg = await context.bot.send_photo(
                        chat_id=query.message.chat.id,
                        photo=url,
                        caption=caption if not caption_used else None,
                        reply_markup=get_buy_button(brand)  # or get_buy_and_back_buttons(brand)
                    )
                    last_message_ids.append(msg.message_id)
                    caption_used = True

                elif is_video:
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.get(url) as resp:
                                if resp.status == 200:
                                    video_bytes = await resp.read()
                                    video_stream = BytesIO(video_bytes)
                                    video_stream.name = "video.mp4"
                                    msg = await context.bot.send_video(
                                        chat_id=query.message.chat.id,
                                        video=InputFile(video_stream),
                                        caption=caption if not caption_used else None,
                                        reply_markup=get_buy_button(brand)  # or get_buy_and_back_buttons(brand)
                                    )
                                    last_message_ids.append(msg.message_id)
                                    caption_used = True
                                else:
                                    logger.warning(f"Failed to fetch video: {url} | Status: {resp.status}")
                    except Exception as e:
                        logger.error(f"Failed to download/send video: {url} | {e}")

                else:
                    logger.warning(f"Unsupported media: {url}")

            if last_message_ids:
                context.user_data["last_gallery_message_ids"] = last_message_ids

        except Exception as e:
            logger.error(f"Error sending submodel media: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")


    # ‚úÖ Regular model selected (check for submodels or content)
    elif data.startswith(("photos_", "review_", "unpacking_")) and data.count("_") >= 2:
        print(f"herejnsjnsfdn")
        content_type, brand, model = parse_callback_data(data)
        model = unquote(model)

        logger.info(f"üéØ Model selected: {brand} {model} ({content_type})")
        doc = gallery.find_one({
            "brand": {"$regex": f"^{brand}$", "$options": "i"},
            "model": {"$regex": f"^{model}$", "$options": "i"},
            "type": content_type
        })

        if not doc:
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if "submodels" in doc and doc["submodels"]:
            # buttons = [[InlineKeyboardButton(
            #     sub["name"],
            #     callback_data=f"{content_type}_{brand}_{quote(model)}_{quote(sub['name'])}"
            # )] for sub in doc["submodels"]]
            buttons = [[InlineKeyboardButton(
                sub["name"],
                callback_data=f"v_{str(doc['_id'])}_{i}"
            )] for i, sub in enumerate(doc["submodels"])]

            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="gallery_back")])
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ {model}:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            return

        if not doc.get("files"):
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            # Clean up previous messages
            if "last_gallery_message_ids" in context.user_data:
                for msg_id in context.user_data["last_gallery_message_ids"]:
                    try:
                        await context.bot.delete_message(chat_id=query.message.chat.id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"Could not delete message {msg_id}: {e}")
                context.user_data.pop("last_gallery_message_ids", None)

            last_message_ids = []
            caption_used = False

            for url in doc["files"][:10]:
                is_image = content_type == "photos" or url.lower().endswith((".jpg", ".jpeg", ".png", ".webp"))
                is_video = url.lower().endswith((".mp4", ".mov", ".mkv"))

                if is_image:
                    msg = await context.bot.send_photo(
                        chat_id=query.message.chat.id,
                        photo=url,
                        caption=caption if not caption_used else None,
                        reply_markup=get_buy_button(brand)
                    )
                    last_message_ids.append(msg.message_id)
                    caption_used = True

                elif is_video:
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.get(url) as resp:
                                if resp.status == 200:
                                    video_bytes = await resp.read()
                                    video_stream = BytesIO(video_bytes)
                                    video_stream.name = "video.mp4"
                                    msg = await context.bot.send_video(
                                        chat_id=query.message.chat.id,
                                        video=InputFile(video_stream),
                                        caption=caption if not caption_used else None,
                                        reply_markup=get_buy_button(brand)
                                    )
                                    last_message_ids.append(msg.message_id)
                                    caption_used = True
                                else:
                                    logger.warning(f"Failed to fetch video: {url} | Status: {resp.status}")
                    except Exception as e:
                        logger.error(f"Failed to download or send video: {url} | {e}")
                else:
                    logger.warning(f"Unsupported media: {url}")

            context.user_data["last_gallery_message_ids"] = last_message_ids


        except Exception as e:
            logger.error(f"Error sending media group: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    elif data.startswith("v_"):  # View submodel by doc ID and index
        print(f"herejnsjnsfdn")
        try:
            _, doc_id, sub_idx = data.split("_")
            doc = gallery.find_one({"_id": ObjectId(doc_id)})
            sub_idx = int(sub_idx)

            if not doc or "submodels" not in doc or sub_idx >= len(doc["submodels"]):
                await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            brand = doc.get("brand", "")
            model = doc.get("model", "")
            match = doc["submodels"][sub_idx]
            caption = match.get("caption", "")
            caption_used = False

            # Clean up previous media
            if "last_gallery_message_ids" in context.user_data:
                for msg_id in context.user_data["last_gallery_message_ids"]:
                    try:
                        await context.bot.delete_message(chat_id=query.message.chat.id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"Could not delete message {msg_id}: {e}")
                context.user_data.pop("last_gallery_message_ids", None)
            media_urls = match.get("files", [])[:1]  # Just take the first one
            if not media_urls:
                await query.edit_message_text("‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            url = media_urls[0]
            is_image = url.lower().endswith((".jpg", ".jpeg", ".png", ".webp"))
            is_video = url.lower().endswith((".mp4", ".mov", ".mkv"))

            if is_image:
                msg = await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=url,
                    caption=caption,
                    reply_markup=get_buy_button(brand)
                )
                context.user_data["last_gallery_message_ids"] = [msg.message_id]

            elif is_video:
                print(f"here")
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            video_bytes = await resp.read()
                            video_stream = BytesIO(video_bytes)
                            video_stream.name = "video.mp4"
                            msg = await context.bot.send_video(
                                chat_id=query.message.chat.id,
                                video=InputFile(video_stream),
                                caption=caption,
                                reply_markup=get_buy_button(brand)
                            )
                            context.user_data["last_gallery_message_ids"] = [msg.message_id]
                        else:
                            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
                            return
            else:
                await query.edit_message_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                return

        except Exception as e:
            logger.error(f"Error handling short callback_data: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

            


async def send_gallery_main_menu(chat_id, bot):
    gallery_main_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –í–∏–¥–µ–æ-—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏", callback_data="gallery_unpack")],
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã", callback_data="gallery_reviews")],
        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="gallery_photos")]
    ])
    await bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –ì–∞–ª–µ—Ä–µ–∏ üëá", reply_markup=gallery_main_keyboard)

# /start handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üì± –ö–æ–º–ø–∞–Ω–∏—è ¬´–ù–∞–¥–µ–∂–Ω—ã–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã¬ª ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, "
        "–≥–¥–µ –≥–ª–∞–≤–µ–Ω—Å—Ç–≤—É—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –≤—ã–≥–æ–¥–∞ –∏ –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ!\n\n"
        "üèÜ –ú—ã –ø—Ä–æ–¥–∞–ª–∏ –æ–∫–æ–ª–æ 1 000 000 —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ ‚Äî –Ω–∞–º –¥–æ–≤–µ—Ä—è—é—Ç –≤–æ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏\n"
        "üîí 100% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è\n"
        "üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ 2-—Ö –ª–µ—Ç\n"
        "üí∏ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è\n\n"
        "üî• –¢–û–õ–¨–ö–û –£ –ù–ê–°:\n"
        "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏\n"
        "üí∞ 10% –∫—ç—à–±–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢-–ë–∞–Ω–∫–∞ (—Ä–∞–∑–¥–µ–ª ¬´–ö—ç—à–±–µ–∫ —É –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤¬ª)\n"
        "üìÖ –†–∞—Å—Å—Ä–æ—á–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ 10%\n"
        "üöö –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ ‚Äî –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è)\n\n"
        "üïò –û–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤—ã–≥–æ–¥–Ω—ã—Ö –∏ –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∏–ª–ª–∏–æ–Ω–∞–º–∏!"
    )
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üñº –ì–ê–õ–ï–†–ï–Ø", callback_data="find_dream")]
    ])
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–ê–ô–¢–ò –°–ú–ê–†–¢–§–û–ù –ú–ï–ß–¢–´¬ª
    # await update.message.reply_text(welcome_text, reply_markup=inline_keyboard)
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo="https://nts-center.ru/uploads/photos/nts_welcome_message.png",  # Replace with actual image URL
        caption=welcome_text,
        reply_markup=inline_keyboard,
        parse_mode="HTML"  # Or "MarkdownV2" if your text uses markdown
    )   

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)

async def delete_previous_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data.get("last_bot_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_bot_message_id"]
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üõç –ö–£–ü–ò–¢–¨":
        await delete_previous_message(update, context)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://nts-online.ru"))]
        ])
        msg1 =await update.message.reply_text("üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏:", reply_markup=keyboard)
        context.user_data["last_bot_message_id"] = msg1.message_id


    elif text == "üñº –ì–ê–õ–ï–†–ï–Ø":
        await delete_previous_message(update, context)
        await send_gallery_main_menu(update.effective_chat.id, context.bot)
    elif text == "üìÇ –ö–ê–¢–ê–õ–û–ì":
        await delete_previous_message(update, context)

        # Remove the menu (restores 4-dot Telegram menu button)
        # await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...", reply_markup=ReplyKeyboardRemove())

        # Send categories as inline buttons
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì± –ê–π—Ñ–æ–Ω—ã", callback_data="catalog_iphones")],
            [InlineKeyboardButton("ü§ñ –ê–Ω–¥—Ä–æ–∏–¥—ã", callback_data="catalog_androids")]
        ])
        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
        context.user_data["last_bot_message_id"] = msg.message_id
        
    # elif text == "üì± –ê–π—Ñ–æ–Ω—ã":
    #     await delete_previous_message(update, context)
    #     keyboard = InlineKeyboardMarkup([
    #         [InlineKeyboardButton("üì± –ü–µ—Ä–µ–π—Ç–∏ –∫ iPhone", web_app=WebAppInfo(url="https://nts-online.ru?scroll=iphone"))]
    #     ])
    #     msg=await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤ Telegram-–º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=keyboard)
    #     context.user_data["last_bot_message_id"] = msg.message_id

    # elif text == "ü§ñ –ê–Ω–¥—Ä–æ–∏–¥—ã":
    #     await delete_previous_message(update, context)
    #     keyboard = InlineKeyboardMarkup([
    #         [InlineKeyboardButton("ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ Android", web_app=WebAppInfo(url="https://nts-online.ru?scroll=android"))]
    #     ])
    #     msg=await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤ Telegram-–º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=keyboard)
    #     context.user_data["last_bot_message_id"] = msg.message_id

    elif text == "‚ÑπÔ∏è –û –ö–û–ú–ü–ê–ù–ò–ò":
        await delete_previous_message(update, context)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏", url="https://www.nts-company.ru/about")]
        ])
        msg=await update.message.reply_text("–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:", reply_markup=keyboard)
        context.user_data["last_bot_message_id"] = msg.message_id

    elif text == "‚≠ê –û–¢–ó–´–í–´":
        await delete_previous_message(update, context)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚≠ê –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã", url="https://www.nts-company.ru/reviews")]
        ])
        msg=await update.message.reply_text("–û—Ç–∑—ã–≤—ã:", reply_markup=keyboard)
        context.user_data["last_bot_message_id"] = msg.message_id
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(update, context)

# Main execution block
if __name__ == '__main__':
    # Replace with your token
    bot_token = "8053579909:AAH85DDtqdUgm-f5motmn872jhwH7chLtDM"

    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("ü§ñ NTS-Company Bot is running...")
    app.run_polling()
